import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,a as e}from"./app-80a2a939.js";const l={},i=e(`<h1 id="面试汇总上" tabindex="-1"><a class="header-anchor" href="#面试汇总上" aria-hidden="true">#</a> 面试汇总上</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>先思考再看答案吧 💢</p></div><h2 id="java面向对象" tabindex="-1"><a class="header-anchor" href="#java面向对象" aria-hidden="true">#</a> Java面向对象</h2><h3 id="变量和运算符" tabindex="-1"><a class="header-anchor" href="#变量和运算符" aria-hidden="true">#</a> 变量和运算符</h3><details class="hint-container details"><summary>Java中的基本类型有哪些？String 是最基本的数据类型吗？</summary><p>Java基本类型：</p><ul><li>基本类型：boolean、byte、char、short、int、long、float、double</li><li>String 是最基本的数据类型，String 属于引用类型，是对象。</li></ul></details><details class="hint-container details"><summary>Java中变量的初始值是什么？</summary><p>Java中变量的初始值是：</p><ul><li>数值型：0</li><li>字符型：&#39;\\u0000&#39;</li><li>布尔型：false</li><li>引用类型：null</li></ul></details><details class="hint-container details"><summary>Integer和int有什么区别？</summary><ul><li>类型： <ul><li>int 是一种基本数据类型，它直接存储整数值</li><li>Integer 是一个类，它是Java的包装类之一，用于将基本数据类型int封装成对象。</li></ul></li><li>Null值： <ul><li>int 不能存储null值，因为它是基本数据类型，它只能表示整数值，不具备存储&quot;无值&quot;的能力。</li><li>Integer 可以存储null值，因为它是一个类，可以引用一个空对象，用于表示&quot;无值&quot;的情况。</li></ul></li><li>自动装箱和拆箱： <ul><li>Java提供了自动装箱（autoboxing）和拆箱（unboxing）功能，允许在int和Integer之间进行自动转换。这意味着你可以在需要Integer的地方使用int，反之亦然，编译器会自动进行类型转换。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> primitiveInt <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> boxedInt <span class="token operator">=</span> primitiveInt<span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token keyword">int</span> unboxedInt <span class="token operator">=</span> boxedInt<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用场景： <ul><li>通常情况下，使用int是更高效的，因为它是原生数据类型，不涉及对象的创建和销毁。</li><li>使用Integer通常用于需要处理对象的情况，例如在集合类（如List、Map）中，因为这些集合类只能存储对象。</li></ul></li></ul></details><details class="hint-container details"><summary>java 中 3*0.1 == 0.3 将会返回什么？true 还是 false？</summary><p>false，因为有些浮点数不能完全精确的表示出来。</p></details><details class="hint-container details"><summary>Java中 &amp;和&amp;&amp;的区别?</summary><ul><li>&amp; 运算符： <ul><li>&amp; 是逻辑与运算符，它执行按位与操作。</li><li>无论左侧和右侧的操作数的值如何，它都会计算两侧的条件表达式，即使左侧为false，右侧也会被计算。</li><li>用于位操作和按位操作，以及在某些需要强制计算两个条件表达式的情况下。 示例：</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> result <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// result的值为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&amp;&amp; 运算符： <ul><li>&amp;&amp; 是短路逻辑与运算符。</li><li>它只有在左侧条件为true时才会计算右侧的条件，如果左侧为false，则不会计算右侧的条件，这可以提高性能并避免不必要的计算。</li><li>通常用于控制流语句（如if语句和while循环）中，用于确定是否执行特定的代码块。 示例：</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> result <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// result的值为false，右侧条件不会被计算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：&amp; 和 &amp;&amp; 都用于逻辑与操作，但在性能和执行方式上有差异。&amp; 总是计算两侧的条件，而 &amp;&amp; 会根据左侧条件的值来决定是否计算右侧条件，这使得 &amp;&amp; 更适合用于控制流语句中，以便根据条件来执行代码块。</p></details><details class="hint-container details"><summary>java中传值和传引用的区别是什么？</summary><ul><li>传值： <ul><li>Java 中的基本数据类型是传值传递的。</li><li>当你将基本数据类型作为参数传递给一个方法时，实际上是将该参数的副本传递给方法，方法对副本的修改不会影响原始变量的值。</li><li>在传值的情况下，方法操作的是原始值的一个副本。</li></ul></li><li>传引用： <ul><li>Java 中的对象引用类型是传引用传递的。</li><li>当你将对象引用作为参数传递给一个方法时，实际上是将引用传递给方法，这个引用指向相同的对象，所以方法对对象的修改会影响原始对象。</li><li>在传引用的情况下，方法操作的是原始对象。</li></ul></li></ul></details><details class="hint-container details"><summary>Java中有了int类型为什么还会出现Integer类型？</summary><ul><li>在集合或泛型中使用对象而不是基本数据类型，因为集合或泛型只能存储对象。这时，Integer 可以用于包装 int，使其成为一个对象。</li><li>Integer 还提供了许多实用的方法，可以用于数学运算、比较等，而 int 没有这些方法。</li><li>在某些情况下，需要表示一个可能没有值的整数，而 int 无法表示 &quot;无值&quot; 的情况，因为它总是有一个默认值，而 Integer 可以为 &quot;无值&quot; 使用 null。</li></ul></details><h2 id="java-io" tabindex="-1"><a class="header-anchor" href="#java-io" aria-hidden="true">#</a> Java IO</h2><h2 id="java集合" tabindex="-1"><a class="header-anchor" href="#java集合" aria-hidden="true">#</a> Java集合</h2><h2 id="java并发" tabindex="-1"><a class="header-anchor" href="#java并发" aria-hidden="true">#</a> Java并发</h2><h2 id="java异常" tabindex="-1"><a class="header-anchor" href="#java异常" aria-hidden="true">#</a> Java异常</h2><h2 id="java新特性" tabindex="-1"><a class="header-anchor" href="#java新特性" aria-hidden="true">#</a> Java新特性</h2>`,16),t=[i];function o(r,p){return n(),s("div",null,t)}const u=a(l,[["render",o],["__file","面试上.html.vue"]]);export{u as default};
